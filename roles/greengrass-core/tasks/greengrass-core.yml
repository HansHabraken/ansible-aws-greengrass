# Copyright Â© 2018 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
---
# This role installs greengrass core and configures for use with espwine
- name: add greengrass group
  group:
    name: ggc_group
    system: yes
    state: present

- name: add greengrass user
  user:
    name: ggc_user
    system: yes
    state: present

- name: download-cgroupfs-mount
  get_url:
    url: "https://raw.githubusercontent.com/tianon/cgroupfs-mount/951c38ee8d802330454bdede20d85ec1c0f8d312/cgroupfs-mount"
    dest: /tmp/cgroupfs-mount.sh
  register: download_cgroupfs_mount

- name: perms-cgroupfs-mount
  file:
    path: /tmp/cgroupfs-mount.sh
    mode: "+x"
  when: not ansible_check_mode

- name: cgroupfs-mount
  command: bash /tmp/cgroupfs-mount.sh

- name: install-pip
  package:
    name: python-pip
    state: present
  when: not ansible_check_mode

- name: install-sqlite
  package:
    name: sqlite3
    state: present
  when: not ansible_check_mode

- name: install-boto3
  pip:
    name: boto3
  when: not ansible_check_mode

- name: download-greengrass
  get_url:
    url: "{{ greengrass_package_url }}"
    dest: files/generated/greengrass-linux-{{ greengrass_version }}.tar.gz
    checksum: "{{ greengrass_checksum }}"
  when: greengrass_package_url is defined

- name: download-greengrass-s3
  aws_s3:
    bucket: "{{ greengrass_s3_bucket }}"
    object: greengrass-linux-x86-64-{{ greengrass_version }}.tar.gz
    dest: /tmp/greengrass-linux-x86-64-{{ greengrass_version }}.tar.gz
    mode: get
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when:
    - aws_access_key is defined
    - aws_secret_key is defined
    - greengrass_package_url is undefined
    - greengrass_package_url is undefined
    - not ansible_check_mode

- file:
    path: /greengrass
    state: directory
    mode: 0755

- file:
    path: /greengrass/certs
    state: directory
    mode: 0755

- name: Check that the greengrass install archive now exists
  stat:
    path: /tmp/greengrass-linux-x86-64-{{ greengrass_version }}.tar.gz
  register: install_stat

- name: unarchive-greengrass
  unarchive:
    src: /tmp/greengrass-linux-x86-64-{{ greengrass_version }}.tar.gz
    dest: /
    remote_src: yes
  when: install_stat.stat.exists

- name: download-root-ca
  get_url:
    url: "http://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem"
    dest: /greengrass/certs/root.ca.pem
    checksum: "{{ root_ca_checksum }}"

- name: download-greengrass-config
  get_url:
    url: "{{ greengrass_core_setup_url }}"
    dest: files/generated/{{ greengrass_core_setup }}
  when: greengrass_core_setup_url is defined

- name: download-greengrass-config-s3
  aws_s3:
    bucket: "{{ greengrass_s3_bucket }}"
    object: "{{ greengrass_core_setup }}"
    dest: /tmp/{{ greengrass_core_setup }}
    mode: get
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when:
    - aws_access_key is defined
    - aws_secret_key is defined
    - greengrass_core_setup_url is undefined
    - not ansible_check_mode
    - not skip_s3_uploads

- name: Check that the setup file now exists
  stat:
    path: /tmp/{{ greengrass_core_setup }}
  register: setup_stat

- name: unarchive-greengrass-config
  unarchive:
    src: /tmp/{{ greengrass_core_setup }}
    dest: /greengrass
    remote_src: yes
  when: setup_stat.stat.exists

- name: start-greengrass
  command: /greengrass/ggc/packages/{{ greengrass_version }}/greengrassd start
  when: no_greengrass_start is undefined
